---
import { Icon } from 'astro-icon/components';
import type { SkillSection, Project } from '../types';
import { skills } from '../data/skills';
import { fetchGitHubProjects } from '../utils/github';
import config from '../config';

let projects: Project[] = [];
try {
  projects = await fetchGitHubProjects(config.github.username);
} catch (error) {
  console.error('Failed to fetch GitHub projects:', error);
}

const PROJECTS_PER_PAGE = 4;
const totalPages = Math.ceil((projects?.length || 0) / PROJECTS_PER_PAGE);
---

<div class="container mx-auto px-4 mt-16 sm:mt-24">
  <div class="tab-switcher inline-flex p-1 bg-white/[0.02] backdrop-blur-xl border border-white/[0.05] rounded-xl">
    <button id="skills-tab" class="tab-button active-tab">
      <div class="tab-highlight"></div>
      <div class="flex items-center">
        <Icon name="mdi:code-braces" class="w-5 h-5 mr-2 shrink-0" />
        <span class="relative z-10">Skills</span>
      </div>
    </button>
    <button id="projects-tab" class="tab-button">
      <div class="tab-highlight"></div>
      <div class="flex items-center">
        <Icon name="mdi:rocket-launch" class="w-5 h-5 mr-2 shrink-0" />
        <span class="relative z-10">Projects</span>
      </div>
    </button>
  </div>
</div>

<section id="skills-section" class="py-12 sm:py-16 relative">
  <div class="absolute inset-0 grid grid-cols-[repeat(auto-fit,minmax(5rem,1fr))] gap-20 opacity-[0.15] blur-[1px] -z-10">
    <div class="bg-gradient-to-b from-purple-500/50 to-transparent h-60 rounded-lg"></div>
  </div>
  
  <div class="container mx-auto px-4">
    <div class="max-w-4xl">
      <h2 class="text-3xl sm:text-4xl font-bold mb-2 text-white/90 tracking-tight">
        <span class="bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-purple-500 to-purple-600">Skills</span>
      </h2>
      <p class="text-base sm:text-lg text-white/60 mb-8 sm:mb-12">Technical expertise and core competencies</p>
    
      <div class="grid grid-cols-1 gap-6 sm:gap-8">
        {skills.map((skill, index) => (
          <div class="group bg-gradient-to-b from-white/[0.03] to-transparent border border-white/[0.08] rounded-xl p-5 sm:p-7
                     hover:border-purple-500/30 backdrop-blur-sm
                     transition-all duration-500 ease-out transform hover:scale-[1.02]"
               style={`animation-delay: ${index * 100}ms`}>
            <div class="flex items-start gap-4">
              <div class="bg-purple-500/10 p-3 rounded-xl border border-purple-500/20 group-hover:border-purple-500/40 
                          transition-all duration-500 group-hover:shadow-[0_0_1.5rem_0_rgba(168,85,247,0.1)]">
                <Icon name={skill.icon} class="w-6 h-6 text-purple-400" />
              </div>
              <div class="flex-1">
                <h3 class="text-lg sm:text-xl font-medium text-white/90 group-hover:text-white transition-colors duration-300">{skill.title}</h3>
                <p class="text-sm sm:text-[0.95rem] text-white/60 group-hover:text-white/70 transition-colors duration-300 mt-1">{skill.description}</p>
                
                <div class="flex flex-wrap gap-2 mt-4">
                  {skill.items.map(item => (
                    <div class="group/item">
                      <div class="relative">
                        <span class="px-3 sm:px-4 py-1.5 sm:py-2 text-sm sm:text-[0.9rem] rounded-lg bg-purple-500/[0.08] text-purple-300/90
                                   border border-purple-500/20 hover:border-purple-500/40 
                                   transition-all duration-300 cursor-default inline-block
                                   hover:bg-purple-500/[0.15] hover:shadow-[0_0_1rem_0_rgba(168,85,247,0.1)]">
                          {item.name}
                        </span>
                        <div class="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-52 p-3 bg-[#1A1A1C]/95 
                                    rounded-lg border border-purple-500/20 text-sm text-white/80
                                    opacity-0 group-hover/item:opacity-100 pointer-events-none backdrop-blur-xl
                                    transition-all duration-300 z-10 shadow-xl hidden sm:block">
                          {item.description}
                          <div class="absolute bottom-0 left-1/2 -translate-x-1/2 translate-y-1/2 rotate-45 
                                     w-2.5 h-2.5 bg-[#1A1A1C]/95 border-r border-b border-purple-500/20"></div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<section id="projects-section" class="py-12 sm:py-16 relative hidden">
  <div class="absolute inset-0 grid grid-cols-[repeat(auto-fit,minmax(5rem,1fr))] gap-20 opacity-[0.15] blur-[1px] -z-10">
    <div class="bg-gradient-to-b from-purple-500/50 to-transparent h-60 rounded-lg"></div>
  </div>
  
  <div class="container mx-auto px-4">
    <div class="max-w-4xl">
      <h2 class="text-3xl sm:text-4xl font-bold mb-2 text-white/90 tracking-tight">
        <span class="bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-purple-500 to-purple-600">Featured Projects</span>
      </h2>
      <p class="text-base sm:text-lg text-white/60 mb-8 sm:mb-12">Highlighted work showcasing technical expertise and problem-solving abilities</p>
    
      <div class="grid grid-cols-1 gap-6 sm:gap-8">
        {projects.map((project, index) => (
          <div class="group bg-gradient-to-b from-white/[0.03] to-transparent border border-white/[0.08] rounded-xl p-5 sm:p-7
                     hover:border-purple-500/30 backdrop-blur-sm project-card hidden
                     transition-all duration-500 ease-out transform hover:scale-[1.02]"
               data-page={Math.floor(index / PROJECTS_PER_PAGE) + 1}
               style={`animation-delay: ${(index % PROJECTS_PER_PAGE) * 100}ms`}>
            <div class="flex items-start gap-4">
              <div class="bg-purple-500/10 p-3 rounded-xl border border-purple-500/20 group-hover:border-purple-500/40 
                          transition-all duration-500 group-hover:shadow-[0_0_1.5rem_0_rgba(168,85,247,0.1)] shrink-0">
                <Icon name="mdi:folder-outline" class="w-6 h-6 sm:w-7 sm:h-7 text-purple-400" />
              </div>
              <div class="flex-1">
                <div class="flex items-center justify-between flex-wrap gap-3 sm:gap-4">
                  <h3 class="text-lg sm:text-xl font-medium text-white/90 group-hover:text-white transition-colors duration-300">{project.title}</h3>
                  <div class="flex gap-3 sm:gap-4 shrink-0">
                    <a href={project.github} class="text-white/60 hover:text-white/90 transition-colors duration-300 hover:scale-110 transform">
                      <Icon name="mdi:github" class="w-5 h-5 sm:w-6 sm:h-6" />
                    </a>
                    {project.demo && (
                      <a href={project.demo} class="text-white/60 hover:text-white/90 transition-colors duration-300 hover:scale-110 transform">
                        <Icon name="mdi:open-in-new" class="w-5 h-5 sm:w-6 sm:h-6" />
                      </a>
                    )}
                  </div>
                </div>
                <p class="text-sm sm:text-[0.95rem] text-white/60 group-hover:text-white/70 transition-colors duration-300 mt-2">{project.description}</p>
                
                <div class="flex flex-wrap gap-2 mt-4">
                  {project.tags.map(tag => (
                    <span class="px-2 sm:px-3 py-1 sm:py-1.5 text-sm rounded-lg bg-purple-500/[0.08] text-purple-300/90
                               border border-purple-500/20 transition-all duration-300 cursor-default inline-block">
                      {tag}
                    </span>
                  ))}
                </div>

                <div class="flex flex-wrap items-center justify-between gap-x-4 sm:gap-x-6 gap-y-2 sm:gap-y-3 mt-4 text-xs sm:text-sm">
                  <div class="flex items-center gap-3 sm:gap-4 text-white/50">
                    <div class="flex items-center gap-1.5" title="Stars">
                      <Icon name="mdi:star" class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-yellow-500/70" />
                      <span>{project.stars}</span>
                    </div>
                    <div class="flex items-center gap-1.5" title="Forks">
                      <Icon name="mdi:source-fork" class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-purple-400/70" />
                      <span>{project.forks}</span>
                    </div>
                    <div class="flex items-center gap-1.5" title="Created At">
                      <Icon name="mdi:calendar" class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-blue-400/70" />
                      <span>{new Date(project.createdAt).toLocaleDateString()}</span>
                    </div>
                  </div>

                  {project.latestCommit && (
                    <div class="flex items-center gap-1.5 sm:gap-2 text-white/50 w-full sm:w-auto" title="Latest Commit">
                      <Icon name="mdi:git" class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-purple-400" />
                      <a href={project.latestCommit.url} 
                         class="font-mono text-purple-300/90 hover:text-purple-300 transition-colors duration-300 text-xs sm:text-sm"
                         target="_blank" 
                         rel="noopener noreferrer">
                        {project.latestCommit.hash}
                      </a>
                      <span class="text-white/40 hidden sm:inline">â€¢</span>
                      <span class="truncate max-w-[150px] sm:max-w-[200px] hidden sm:inline" title={project.latestCommit.message}>
                        {project.latestCommit.message}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {totalPages > 1 && (
        <div class="flex justify-center items-center gap-2 mt-12">
          <button id="prev-page" class="pagination-btn" disabled>
            <Icon name="mdi:chevron-left" class="w-5 h-5" />
          </button>
          
          <div class="flex gap-2 items-center">
            {Array.from({ length: totalPages }, (_, i) => (
              <button class={`w-8 h-8 rounded-lg border text-sm font-medium transition-all duration-300 pagination-page-btn
                           ${i === 0 ? 'border-purple-500/50 bg-purple-500/10 text-white' : 'border-white/10 text-white/60 hover:border-purple-500/30 hover:bg-purple-500/5'}`}
                      data-page={i + 1}>
                {i + 1}
              </button>
            ))}
          </div>

          <button id="next-page" class="pagination-btn" disabled={totalPages === 1}>
            <Icon name="mdi:chevron-right" class="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .group {
    opacity: 0;
    animation: fadeInUp 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .tab-switcher {
    position: relative;
    isolation: isolate;
  }

  .tab-button {
    @apply relative flex items-center px-6 py-3 text-[0.95rem] font-medium transition-all duration-500 rounded-lg;
    color: rgba(255, 255, 255, 0.6);
  }

  .tab-highlight {
    @apply absolute inset-0 rounded-lg opacity-0 transition-opacity duration-500;
    background: linear-gradient(
      135deg,
      rgba(168, 85, 247, 0.2),
      rgba(168, 85, 247, 0.1)
    );
    z-index: 0;
  }

  .tab-button:hover {
    color: rgba(255, 255, 255, 0.9);
  }

  .tab-button:hover .tab-highlight {
    opacity: 0.5;
  }

  .active-tab {
    color: rgba(255, 255, 255, 1);
  }

  .active-tab .tab-highlight {
    opacity: 1;
  }

  .active-tab::after {
    content: '';
    position: absolute;
    inset: -1px;
    border-radius: 8px;
    padding: 1px;
    background: linear-gradient(135deg, rgba(168, 85, 247, 0.5), rgba(168, 85, 247, 0.2));
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
  }

  .pagination-btn {
    @apply w-8 h-8 rounded-lg border border-white/10 text-white/60 flex items-center justify-center
           transition-all duration-300 hover:border-purple-500/30 hover:bg-purple-500/5 disabled:opacity-50
           disabled:cursor-not-allowed disabled:hover:border-white/10 disabled:hover:bg-transparent;
  }

  .project-card {
    opacity: 0;
    animation: fadeInUp 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  .project-card.hidden {
    display: none;
  }
</style>

<script>
  function initializeTabSwitching() {
    const skillsTab = document.getElementById('skills-tab');
    const projectsTab = document.getElementById('projects-tab');
    const skillsSection = document.getElementById('skills-section');
    const projectsSection = document.getElementById('projects-section');

    if (skillsTab && projectsTab && skillsSection && projectsSection) {
      skillsTab.addEventListener('click', () => {
        skillsTab.classList.add('active-tab');
        projectsTab.classList.remove('active-tab');
        skillsSection.classList.remove('hidden');
        projectsSection.classList.add('hidden');
      });

      projectsTab.addEventListener('click', () => {
        projectsTab.classList.add('active-tab');
        skillsTab.classList.remove('active-tab');
        projectsSection.classList.remove('hidden');
        skillsSection.classList.add('hidden');
      });
    }
  }

  function initializePagination() {
    const projectCards = document.querySelectorAll('.project-card');
    const pageButtons = document.querySelectorAll('.pagination-page-btn');
    const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
    const nextButton = document.getElementById('next-page') as HTMLButtonElement;
    let currentPage = 1;

    function showPage(page: number) {
      projectCards.forEach(card => {
        if (parseInt(card.getAttribute('data-page') || '1') === page) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });

      pageButtons.forEach(btn => {
        const btnPage = parseInt(btn.getAttribute('data-page') || '1');
        if (btnPage === page) {
          btn.classList.add('border-purple-500/50', 'bg-purple-500/10', 'text-white');
          btn.classList.remove('border-white/10', 'text-white/60');
        } else {
          btn.classList.remove('border-purple-500/50', 'bg-purple-500/10', 'text-white');
          btn.classList.add('border-white/10', 'text-white/60');
        }
      });

      if (prevButton) prevButton.disabled = page === 1;
      if (nextButton) nextButton.disabled = page === pageButtons.length;
      currentPage = page;
    }

    pageButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const page = parseInt(btn.getAttribute('data-page'));
        showPage(page);
      });
    });

    prevButton?.addEventListener('click', () => {
      if (currentPage > 1) {
        showPage(currentPage - 1);
      }
    });

    nextButton?.addEventListener('click', () => {
      if (currentPage < pageButtons.length) {
        showPage(currentPage + 1);
      }
    });

    // Show first page initially
    showPage(1);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    initializeTabSwitching();
    initializePagination();
  });

  // Also initialize when Astro handles client-side navigation
  document.addEventListener('astro:page-load', () => {
    initializeTabSwitching();
    initializePagination();
  });
</script>