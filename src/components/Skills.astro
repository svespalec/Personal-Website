---
import { Icon } from 'astro-icon/components';
import type { SkillSection } from '../types';
import { skills } from '../data/skills';
---

<div class="tab-switcher flex gap-4 container mx-auto px-4 mt-24 mb-16">
  <button id="skills-tab" class="tab-button active-tab">
    <span class="relative z-10">Skills</span>
  </button>
  <button id="projects-tab" class="tab-button">
    <span class="relative z-10">Projects</span>
  </button>
</div>

<section id="skills-section" class="py-16 relative">
  <div class="absolute inset-0 grid grid-cols-[repeat(auto-fit,minmax(5rem,1fr))] gap-20 opacity-[0.15] blur-[1px] -z-10">
    <div class="bg-gradient-to-b from-purple-500/50 to-transparent h-60 rounded-lg"></div>
  </div>
  
  <div class="container mx-auto px-4">
    <div class="max-w-3xl">
      <h2 class="text-4xl font-bold mb-2 text-white/90 tracking-tight">
        <span class="bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-purple-500 to-purple-600">Skills</span>
      </h2>
      <p class="text-white/60 mb-10 text-lg">Technical expertise and core competencies</p>
    
      <div class="grid grid-cols-1 gap-6">
        {skills.map((skill, index) => (
          <div class="group bg-[#1A1A1C]/50 border border-white/[0.08] rounded-lg p-6
                     hover:border-purple-500/30 hover:bg-[#1A1A1C]/60
                     transition-all duration-300"
               style={`animation-delay: ${index * 100}ms`}>
            <div class="flex items-center gap-3 mb-3">
              <div class="bg-purple-500/10 p-2.5 rounded-lg border border-purple-500/20 group-hover:border-purple-500/40 transition-all duration-300">
                <Icon name={skill.icon} class="w-5 h-5 text-purple-400" />
              </div>
              <div>
                <h3 class="text-lg font-medium text-white/90 group-hover:text-white transition-colors duration-300">{skill.title}</h3>
                <p class="text-sm text-white/60 group-hover:text-white/70 transition-colors duration-300">{skill.description}</p>
              </div>
            </div>
            
            <div class="flex flex-wrap gap-2 pl-[3.2rem]">
              {skill.items.map(item => (
                <div class="group/item">
                  <div class="relative">
                    <span class="px-3 py-1.5 text-sm rounded-lg bg-purple-500/10 text-purple-300
                               border border-purple-500/20 hover:border-purple-500/40 
                               transition-all duration-300 cursor-default inline-block
                               hover:bg-purple-500/20">
                      {item.name}
                    </span>
                    <div class="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-48 p-2 bg-[#1A1A1C] 
                                rounded-lg border border-purple-500/20 text-xs text-white/80
                                opacity-0 group-hover/item:opacity-100 pointer-events-none
                                transition-all duration-300 z-10">
                      {item.description}
                      <div class="absolute bottom-0 left-1/2 -translate-x-1/2 translate-y-1/2 rotate-45 
                                 w-2 h-2 bg-[#1A1A1C] border-r border-b border-purple-500/20"></div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .group {
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .tab-button {
    @apply relative px-6 py-2.5 text-lg font-medium text-white/70 transition-all duration-300 rounded-lg;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .tab-button::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 8px;
    background: linear-gradient(to right, theme('colors.purple.500'), theme('colors.purple.600'));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .tab-button:hover {
    @apply text-white;
    border-color: rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.05);
  }

  .active-tab {
    @apply text-white;
    border-color: theme('colors.purple.500 / 30%');
  }

  .active-tab::before {
    opacity: 0.1;
  }
</style>

<script>
  function initializeTabSwitching() {
    const skillsTab = document.getElementById('skills-tab');
    const projectsTab = document.getElementById('projects-tab');
    const skillsSection = document.getElementById('skills-section');
    const projectsSection = document.getElementById('projects-section');

    if (skillsTab && projectsTab && skillsSection && projectsSection) {
      skillsTab.addEventListener('click', () => {
        skillsTab.classList.add('active-tab');
        projectsTab.classList.remove('active-tab');
        skillsSection.classList.remove('hidden');
        projectsSection.classList.add('hidden');
      });

      projectsTab.addEventListener('click', () => {
        projectsTab.classList.add('active-tab');
        skillsTab.classList.remove('active-tab');
        projectsSection.classList.remove('hidden');
        skillsSection.classList.add('hidden');
      });
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeTabSwitching);
  // Also initialize when Astro handles client-side navigation
  document.addEventListener('astro:page-load', initializeTabSwitching);
</script>