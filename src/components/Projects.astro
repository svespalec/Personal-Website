---
import { Icon } from 'astro-icon/components';
import type { Project } from '../types';
import { projects } from '../data/projects';

const PROJECTS_PER_PAGE = 4;
const totalPages = Math.ceil(projects.length / PROJECTS_PER_PAGE);
---

<section class="py-6 bg-[#030304]">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl font-bold mb-6 text-white">Featured Projects</h2>
    
    <div class="relative h-[320px]">
      {Array.from({ length: totalPages }).map((_, pageIndex) => (
        <div 
          class="projects-page grid grid-cols-1 md:grid-cols-2 gap-6 absolute inset-0 transition-all duration-500 opacity-0 translate-x-full cursor-default"
          data-page={pageIndex}
        >
          {projects.slice(pageIndex * PROJECTS_PER_PAGE, (pageIndex + 1) * PROJECTS_PER_PAGE).map((project, index) => (
            <div class="bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl overflow-hidden 
                        hover:border-purple-500/20 hover:bg-white/[0.07] 
                        transition-all duration-300 p-5 group fade-in-up"
                 style={`animation-delay: ${index * 150}ms`}>
              <div class="flex justify-between items-start gap-4 mb-3">
                <h3 class="text-xl font-bold text-white group-hover:text-purple-300 transition-colors">{project.title}</h3>
                <div class="flex gap-3">
                  <a href={project.github} class="text-gray-400 hover:text-purple-400 transition-colors transform hover:scale-110 duration-200">
                    <Icon name="mdi:github" class="w-6 h-6" />
                  </a>
                  <a href={project.demo} class="text-gray-400 hover:text-purple-400 transition-colors transform hover:scale-110 duration-200">
                    <Icon name="mdi:external-link" class="w-6 h-6" />
                  </a>
                </div>
              </div>
              <p class="text-base text-gray-400 mb-4 group-hover:text-gray-300 transition-colors">{project.description}</p>
              <div class="flex flex-wrap gap-2">
                {project.tags.map(tag => (
                  <span class="px-3 py-1 rounded-full bg-purple-500/10 text-purple-300 border border-purple-500/20 text-sm
                               hover:bg-purple-500/20 hover:border-purple-500/40 transition-all duration-200">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>

    {totalPages > 1 && (
      <div class="flex justify-center gap-3 mt-4">
        {Array.from({ length: totalPages }).map((_, index) => (
          <button
            class="w-3 h-3 rounded-full bg-white/20 transition-all duration-300 hover:bg-purple-500 focus:outline-none page-dot"
            data-page={index}
            aria-label={`Go to page ${index + 1}`}
          />
        ))}
      </div>
    )}
  </div>
</section>

<style>
  .projects-page[data-page="0"] {
    opacity: 1;
    transform: translateX(0);
  }

  .fade-in-up {
    animation: fadeInUp 0.8s ease-out forwards;
    opacity: 0;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  function initializeProjectPages() {
    const pages = document.querySelectorAll('.projects-page');
    const dots = document.querySelectorAll('.page-dot');
    let currentPage = 0;

    function showPage(pageIndex: number) {
      pages.forEach((page: Element, index: number) => {
        if (index === pageIndex) {
          page.classList.remove('opacity-0', 'translate-x-full');
          page.classList.add('opacity-100', 'translate-x-0');
        } else {
          page.classList.add('opacity-0', 'translate-x-full');
          page.classList.remove('opacity-100', 'translate-x-0');
        }
      });

      dots.forEach((dot: Element, index: number) => {
        if (index === pageIndex) {
          dot.classList.add('bg-purple-500');
          dot.classList.remove('bg-white/20');
        } else {
          dot.classList.remove('bg-purple-500');
          dot.classList.add('bg-white/20');
        }
      });

      currentPage = pageIndex;
    }

    dots.forEach((dot: Element, index: number) => {
      dot.addEventListener('click', () => showPage(index));
    });

    // Initialize first page
    showPage(0);

    // Auto-advance every 5 seconds
    setInterval(() => {
      const nextPage = (currentPage + 1) % pages.length;
      showPage(nextPage);
    }, 5000);
  }

  // Run after DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeProjectPages);
</script>