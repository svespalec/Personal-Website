---
import { Icon } from 'astro-icon/components';
import type { Project } from '../types';
import { projects } from '../data/projects';

const PROJECTS_PER_PAGE = 4;
const totalPages = Math.ceil(projects.length / PROJECTS_PER_PAGE);
---

<section id="projects-section" class="hidden py-16 relative">
  <div class="absolute inset-0 grid grid-cols-[repeat(auto-fit,minmax(5rem,1fr))] gap-20 opacity-[0.15] blur-[1px] -z-10">
    <div class="bg-gradient-to-b from-purple-500/50 to-transparent h-60 rounded-lg"></div>
  </div>
  
  <div class="container mx-auto px-4">
    <div class="max-w-3xl">
      <h2 class="text-3xl font-bold mb-10 text-white/90 tracking-tight">
        <span class="bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-purple-600">Featured Projects</span>
      </h2>
      
      <div class="relative">
        <div class="projects-container">
          <div class="grid grid-cols-1 gap-6">
            {projects.map((project, index) => (
              <div 
                class="project-item opacity-0 transition-all duration-500 ease-out"
                data-index={index}
              >
                <div class="group bg-[#1A1A1C]/50 border border-white/[0.08] rounded-lg p-6
                            hover:border-purple-500/30 hover:bg-[#1A1A1C]/60
                            transition-all duration-300 h-full">
                  <div class="flex justify-between items-start gap-4 mb-3">
                    <h3 class="text-lg font-medium text-white/90 group-hover:text-white transition-colors duration-300">{project.title}</h3>
                    <div class="flex gap-2 shrink-0">
                      <a href={project.github} target="_blank" rel="noopener noreferrer" class="text-white/60 hover:text-purple-400 transition-colors duration-300">
                        <Icon name="mdi:github" class="w-5 h-5" />
                      </a>
                      <a href={project.demo} target="_blank" rel="noopener noreferrer" class="text-white/60 hover:text-purple-400 transition-colors duration-300">
                        <Icon name="mdi:external-link" class="w-5 h-5" />
                      </a>
                    </div>
                  </div>
                  <p class="text-sm text-white/70 mb-4 group-hover:text-white/80 transition-colors duration-300">{project.description}</p>
                  <div class="flex flex-wrap gap-1.5">
                    {project.tags.map(tag => (
                      <div class="group/item">
                        <div class="relative">
                          <span class="px-3 py-1.5 text-sm rounded-lg bg-purple-500/10 text-purple-300
                                     border border-purple-500/20 hover:border-purple-500/40 
                                     transition-all duration-300 cursor-default inline-block
                                     hover:bg-purple-500/20">
                            {tag}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {totalPages > 1 && (
        <div class="flex justify-center gap-4 mt-12">
          {Array.from({ length: totalPages }).map((_, index) => (
            <button
              class="w-3 h-3 rounded-full bg-white/[0.15] transition-all duration-300 
                     hover:bg-purple-500/40 focus:outline-none page-dot"
              data-page={index}
              aria-label={`Go to page ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .project-item {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }

  .project-item.active {
    opacity: 1;
    transform: translateY(0);
    pointer-events: all;
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  }

  .page-dot.active {
    @apply bg-purple-500;
    transform: scale(1.2);
  }

  .hidden {
    display: none;
  }
</style>

<script>
  let autoRotateTimer: number;

  function initializeProjectPages() {
    const items = document.querySelectorAll('.project-item');
    const dots = document.querySelectorAll('.page-dot');
    const itemsPerPage = 4;
    let currentPage = 0;

    function resetAutoRotate() {
      if (autoRotateTimer) {
        clearInterval(autoRotateTimer);
      }
      autoRotateTimer = setInterval(() => {
        const nextPage = (currentPage + 1) % Math.ceil(items.length / itemsPerPage);
        showPage(nextPage);
      }, 5000);
    }

    function showPage(pageIndex: number) {
      const startIdx = pageIndex * itemsPerPage;
      const endIdx = startIdx + itemsPerPage;

      items.forEach((item: Element, index: number) => {
        item.classList.remove('active');
        if (index >= startIdx && index < endIdx) {
          setTimeout(() => {
            item.classList.add('active');
          }, 50 * (index - startIdx));
        }
      });

      dots.forEach((dot: Element, index: number) => {
        if (index === pageIndex) {
          dot.classList.add('active');
        } else {
          dot.classList.remove('active');
        }
      });

      currentPage = pageIndex;
      resetAutoRotate();
    }

    dots.forEach((dot: Element, index: number) => {
      dot.addEventListener('click', () => showPage(index));
    });

    // Initialize first page and auto-rotate
    showPage(0);
  }

  // Add tab switching logic
  function initializeTabSwitching() {
    const skillsTab = document.getElementById('skills-tab');
    const projectsTab = document.getElementById('projects-tab');
    const skillsSection = document.getElementById('skills-section');
    const projectsSection = document.getElementById('projects-section');

    if (skillsTab && projectsTab && skillsSection && projectsSection) {
      skillsTab.addEventListener('click', () => {
        skillsTab.classList.add('active-tab');
        projectsTab.classList.remove('active-tab');
        skillsSection.classList.remove('hidden');
        projectsSection.classList.add('hidden');
      });

      projectsTab.addEventListener('click', () => {
        projectsTab.classList.add('active-tab');
        skillsTab.classList.remove('active-tab');
        projectsSection.classList.remove('hidden');
        skillsSection.classList.add('hidden');
      });
    }
  }

  document.addEventListener('astro:page-load', () => {
    initializeProjectPages();
    initializeTabSwitching();
  });
  document.addEventListener('DOMContentLoaded', () => {
    initializeProjectPages();
    initializeTabSwitching();
  });
</script>